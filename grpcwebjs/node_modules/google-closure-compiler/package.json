{
  "_args": [
    [
      {
        "raw": "google-closure-compiler",
        "scope": null,
        "escapedName": "google-closure-compiler",
        "name": "google-closure-compiler",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/johan/gows/src/github.com/johanbrandhorst/gopherjs-grpc-web/grpc-web/include"
    ]
  ],
  "_from": "google-closure-compiler@latest",
  "_id": "google-closure-compiler@20170423.0.0",
  "_inCache": true,
  "_location": "/google-closure-compiler",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/google-closure-compiler-20170423.0.0.tgz_1493159869390_0.6573675791732967"
  },
  "_npmUser": {
    "name": "chadhikes",
    "email": "chadkillingsworth@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "google-closure-compiler",
    "scope": null,
    "escapedName": "google-closure-compiler",
    "name": "google-closure-compiler",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/google-closure-compiler/-/google-closure-compiler-20170423.0.0.tgz",
  "_shasum": "475c6a2f4512fd7fdbacb32997b2e1ab1ca6fff8",
  "_shrinkwrap": null,
  "_spec": "google-closure-compiler",
  "_where": "/home/johan/gows/src/github.com/johanbrandhorst/gopherjs-grpc-web/grpc-web/include",
  "bugs": {
    "url": "https://github.com/google/closure-compiler/issues"
  },
  "contributors": [
    {
      "name": "Chad Killingsworth",
      "email": "chadkillingsworth@gmail.com"
    }
  ],
  "dependencies": {
    "chalk": "^1.0.0",
    "vinyl": "^2.0.1",
    "vinyl-sourcemaps-apply": "^0.2.0"
  },
  "description": "Check, compile, optimize and compress Javascript with Closure-Compiler",
  "devDependencies": {
    "gulp": "^3.9.0",
    "gulp-mocha": "^4.0.1",
    "gulp-sourcemaps": "^2.4.1",
    "lodash": "^4.6.1",
    "mocha": "^3.2.0",
    "ncp": "^2.0.0",
    "semver": "^5.1.0",
    "should": "^11.2.0",
    "stream-assert": "^2.0.3"
  },
  "directories": {},
  "dist": {
    "shasum": "475c6a2f4512fd7fdbacb32997b2e1ab1ca6fff8",
    "tarball": "https://registry.npmjs.org/google-closure-compiler/-/google-closure-compiler-20170423.0.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "lib/",
    "compiler.jar",
    "index.js",
    "package.json",
    "contrib/",
    "README.md"
  ],
  "gitHead": "a89bfe8bc212d4063eecc7891befe8e144130c13",
  "homepage": "https://developers.google.com/closure/compiler/",
  "keywords": [
    "javascript",
    "compiler",
    "optimizer",
    "minifier",
    "closure",
    "gulpplugin",
    "gruntplugin"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "blickly",
      "email": "blickly+npm@google.com"
    },
    {
      "name": "brad4d",
      "email": "bradfordcsmith@google.com"
    },
    {
      "name": "chadhikes",
      "email": "chadkillingsworth@gmail.com"
    },
    {
      "name": "dominator008",
      "email": "zhoumotongxue008@gmail.com"
    },
    {
      "name": "joeltine",
      "email": "jmarti221@gmail.com"
    }
  ],
  "name": "google-closure-compiler",
  "optionalDependencies": {},
  "readme": "# google-closure-compiler\n[![Build Status](https://travis-ci.org/google/closure-compiler-npm.svg?branch=master)](https://travis-ci.org/google/closure-compiler-npm) [![npm version](https://badge.fury.io/js/google-closure-compiler.svg)](https://badge.fury.io/js/google-closure-compiler)\n\nCheck, compile, optimize and compress Javascript with Closure-Compiler\n\nThis repository tracks issues related to the publication to npmjs.org and associated plugins.\nAny bugs not related to the plugins themselves should be reported to the\n[main repository](https://github.com/google/closure-compiler/).\n\n## Getting Started\n*This package requires java to be installed and in the path.* Looking for a version that\ndoes not require java? See [google-closure-compiler-js](https://github.com/google/closure-compiler-js).\n\nIf you are new to [Closure-Compiler](https://developers.google.com/closure/compiler/), make\nsure to read and understand the\n[compilation levels](https://developers.google.com/closure/compiler/docs/compilation_levels) as\nthe compiler works very differently depending on the compilation level selected.\n\nFor help or questions with the compiler, the best resource is\n[Stack Overflow](http://stackoverflow.com/questions/tagged/google-closure-compiler). Posts there\nare monitored by multiple Closure Compiler team members.\n\nYou may also post in the\n[Closure Compiler Discuss Google Group](https://groups.google.com/forum/#!forum/closure-compiler-discuss).\n\n*Please don't cross post to both Stackoverflow and Closure Compiler Discuss.*\n\n## Usage\nThe compiler package now includes build tool plugins for [Grunt](http://gruntjs.com/) and\n[Gulp](http://gulpjs.com/).\n\n### Installation\n\n```\nnpm install --save google-closure-compiler\n```\n\n### Configuration\n\nThe compiler has a large number of flags. The best documentation for the flags can be found by\nrunning the `--help` command of the compiler.jar found inside the\n`node_modules/google-closure-compiler` folder:\n\n```\njava -jar compiler.jar --help\n```\n\n### Specifying Options\n\nBoth the grunt and gulp tasks take options objects. The option parameters map directly to the\ncompiler flags without the leading '--' characters.\n\nValues are either strings or booleans. Options which have multiple values can be arrays.\n\n```js\n  {\n    js: ['/file-one.js', '/file-two.js'],\n    compilation_level: 'ADVANCED',\n    js_output_file: 'out.js',\n    debug: true\n  }\n```\n\nFor advanced usages, the options may be specified as an array of strings. These values _include_\nthe \"--\" characters and are directly passed to the compiler in the order specified:\n\n```js\n  [\n    '--js', '/file-one.js',\n    '--js', '/file-two.js',\n    '--compilation_level', 'ADVANCED',\n    '--js_output_file', 'out.js',\n    '--debug'\n  ]\n```\n\nWhen an array of flags is passed, the input files should not be specified via the build tools, but\nrather as compilation flags directly.\n\nSome shells (particularly windows) try to do expansion on globs rather than passing the string on\nto the compiler. To prevent this it is necessary to quote certain arguments:\n\n```js\n  {\n    js: '\"my/quoted/glob/**.js\"',\n    compilation_level: 'ADVANCED',\n    js_output_file: 'out.js',\n    debug: true\n  }\n```\n\n## Using the Grunt Task\n\nInclude the plugin in your Gruntfile.js:\n\n```js\nrequire('google-closure-compiler').grunt(grunt);\n// The load-grunt-tasks plugin won't automatically load closure-compiler\n```\n\nTask targets, files and options may be specified according to the grunt\n[Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n### Basic Configuration Example:\n\n```js\nrequire('google-closure-compiler').grunt(grunt);\n\n// Project configuration.\ngrunt.initConfig({\n  'closure-compiler': {\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/js/**/*.js']\n      },\n      options: {\n        compilation_level: 'SIMPLE',\n        language_in: 'ECMASCRIPT5_STRICT',\n        create_source_map: 'dest/output.min.js.map',\n        output_wrapper: '(function(){\\n%output%\\n}).call(this)\\n//# sourceMappingURL=output.min.js.map'\n      }\n    }\n  }\n});\n```\n\n### Closure Library Example:\n\n```js\n\nvar compilerPackage = require('google-closure-compiler');\ncompilerPackage.grunt(grunt);\n\n// Project configuration.\ngrunt.initConfig({\n  'closure-compiler': {\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/js/**/*.js']\n      },\n      options: {\n        js: '/node_modules/google-closure-library/**.js'\n        externs: compilerPackage.compiler.CONTRIB_PATH + '/externs/jquery-1.9.js',\n        compilation_level: 'SIMPLE',\n        manage_closure_dependencies: true,\n        language_in: 'ECMASCRIPT5_STRICT',\n        create_source_map: 'dest/output.min.js.map',\n        output_wrapper: '(function(){\\n%output%\\n}).call(this)\\n//# sourceMappingURL=output.min.js.map'\n      }\n    }\n  }\n});\n```\n\n### Advanced Usage with Arguments Array:\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  'closure-compiler': {\n    my_target: {\n      options: {\n        // When args is present, all other options are ignored\n        args: [\n          '--js', '/file-one.js',\n          '--js', '/file-two.js',\n          '--compilation_level', 'ADVANCED',\n          '--js_output_file', 'out.js',\n          '--debug'\n        ]\n      }\n    }\n  }\n});\n```\n\n## Using the Gulp Plugin\n\nThe gulp plugin supports piping multiple files through the compiler.\n\nOptions are a direct match to the compiler flags without the leading \"--\".\n\n### Basic Configuration Example:\n\n```js\nvar closureCompiler = require('google-closure-compiler').gulp();\n\ngulp.task('js-compile', function () {\n  return gulp.src('./src/js/**/*.js', {base: './'})\n      .pipe(closureCompiler({\n          compilation_level: 'SIMPLE',\n          warning_level: 'VERBOSE',\n          language_in: 'ECMASCRIPT6_STRICT',\n          language_out: 'ECMASCRIPT5_STRICT',\n          output_wrapper: '(function(){\\n%output%\\n}).call(this)',\n          js_output_file: 'output.min.js'\n        }))\n      .pipe(gulp.dest('./dist/js'));\n});\n```\n\n### Use without gulp.src\nGulp files are all read into memory, transformed into a JSON stream, and piped through the\ncompiler. With large source sets this may require a large amount of memory.\n\nClosure-compiler can natively expand file globs which will greatly alleviate this issue.\n\n```js\nvar compilerPackage = require('google-closure-compiler');\nvar closureCompiler = compilerPackage.gulp();\n\ngulp.task('js-compile', function () {\n  return closureCompiler({\n        js: './src/js/**.js',\n        externs: compilerPackage.compiler.CONTRIB_PATH + '/externs/jquery-1.9.js',\n        compilation_level: 'SIMPLE',\n        warning_level: 'VERBOSE',\n        language_in: 'ECMASCRIPT6_STRICT',\n        language_out: 'ECMASCRIPT5_STRICT',\n        output_wrapper: '(function(){\\n%output%\\n}).call(this)',\n        js_output_file: 'output.min.js'\n      })\n      .src() // needed to force the plugin to run without gulp.src\n      .pipe(gulp.dest('./dist/js'));\n});\n```\n\n### gulp.src base option\nGulp attempts to set the base of a glob from the point of the first wildcard. This isn't always\nwhat is desired. Users can specify the { base: 'path' } option to `gulp.src` calls to override\nthis behavior.\n\n### Advanced Usage with Arguments Array:\n\n```js\nvar closureCompiler = require('google-closure-compiler').gulp();\n\ngulp.task('js-compile', function () {\n  return closureCompiler([\n        '--js', '/file-one.js',\n        '--js', '/file-two.js',\n        '--compilation_level', 'ADVANCED',\n        '--js_output_file', 'out.js',\n        '--debug'\n      ])\n      .src() // needed to force the plugin to run without gulp.src\n      .pipe(gulp.dest('./dist/js'));\n});\n```\n\n### Gulp Sourcemaps\nThe gulp plugin supports gulp sourcemaps.\n\n```js\nvar closureCompiler = require('google-closure-compiler').gulp();\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.task('js-compile', function () {\n  return gulp.src('./src/js/**/*.js', {base: './'})\n      .pipe(sourcemaps.init())\n      .pipe(closureCompiler({\n          compilation_level: 'SIMPLE',\n          warning_level: 'VERBOSE',\n          language_in: 'ECMASCRIPT6_STRICT',\n          language_out: 'ECMASCRIPT5_STRICT',\n          output_wrapper: '(function(){\\n%output%\\n}).call(this)',\n          js_output_file: 'output.min.js'\n        }))\n      .pipe(sourcemaps.write('/')) // gulp-sourcemaps automatically adds the sourcemap url comment\n      .pipe(gulp.dest('./dist/js'));\n});\n```\n\n## Specifying Extra Java Arguments\nSome users may wish to pass the java vm extra arguments - such as to specify the amount of memory the compiler should\nbe allocated. Both the grunt and gulp plugins support this.\n\n### Grunt\n```js\nrequire('google-closure-compiler').grunt(grunt, ['-Xms2048m']);\n```\n\n### Gulp\n```js\nvar closureCompiler = require('google-closure-compiler').gulp({\n  extraArguments: ['-Xms2048m']\n});\n```\n\n## Plugin Authors and Native Node Usage\nA low-level node class is included to facilitate spawning the compiler jar as a process from Node.\nIn addition, it exposes a static property with the path to the compiler jar file.\n\n```js\nvar ClosureCompiler = require('google-closure-compiler').compiler;\n\nconsole.log(ClosureCompiler.COMPILER_PATH); // absolute path the compiler jar\nconsole.log(ClosureCompiler.CONTRIB_PATH); // absolute path the contrib folder which contains\n\nvar closureCompiler = new ClosureCompiler({\n  js: 'file-one.js',\n  compilation_level: 'ADVANCED'\n});\n\nvar compilerProcess = closureCompiler.run(function(exitCode, stdOut, stdErr) {\n  //compilation complete\n});\n```\n\n## License\nCopyright 2015 The Closure Compiler Authors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n## Version History\nClosure Compiler release notes can be found on the\n[main repository wiki](https://github.com/google/closure-compiler/wiki/Binary-Downloads).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/google/closure-compiler-npm.git"
  },
  "scripts": {
    "pretest": "./build_compiler.js",
    "test": "mocha"
  },
  "version": "20170423.0.0"
}
